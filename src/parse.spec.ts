/** Tests for the command line parser, which was a bit annoying */

'use strict'

import Action from './action'
import parse from './parse'

describe('parse', function () {
  it('helps', function () {
    expect(parse(['--help'])).toEqual({ action: Action.help, wrap: 38, ignoreGarbage: false, fileName: undefined })
  })
  it('versions', function () {
    expect(parse(['--version'])).toEqual({ action: Action.version, wrap: 38, ignoreGarbage: false, fileName: undefined })
  })
  it('encodes', function () {
    expect(parse([])).toEqual({ action: Action.encode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['fileName'])).toEqual({ action: Action.encode, wrap: 38, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['-'])).toEqual({ action: Action.encode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--'])).toEqual({ action: Action.encode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--', 'fileName'])).toEqual({ action: Action.encode, wrap: 38, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['--', '-'])).toEqual({ action: Action.encode, wrap: 38, ignoreGarbage: false, fileName: '-' })
    expect(parse(['--', '--'])).toEqual({ action: Action.encode, wrap: 38, ignoreGarbage: false, fileName: '--' })
  })
  it('wraps', function () {
    expect(parse(['-w', '140'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: undefined })
    expect(parse(['-w', '140', 'fileName'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['-w', '140', '-'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: undefined })
    expect(parse(['-w', '140', '--'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: undefined })
    expect(parse(['-w', '140', '--', 'fileName'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['-w', '140', '--', '-'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: '-' })
    expect(parse(['-w', '140', '--', '--'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: '--' })
    expect(parse(['--wrap', '140'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--wrap', '140', 'fileName'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['--wrap', '140', '-'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--wrap', '140', '--'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--wrap', '140', '--', 'fileName'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['--wrap', '140', '--', '-'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: '-' })
    expect(parse(['--wrap', '140', '--', '--'])).toEqual({ action: Action.encode, wrap: 140, ignoreGarbage: false, fileName: '--' })
    expect(parse(['-w', '0'])).toEqual({ action: Action.encode, wrap: Infinity, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--wrap', '0'])).toEqual({ action: Action.encode, wrap: Infinity, ignoreGarbage: false, fileName: undefined })
  })
  it('decodes', function () {
    expect(parse(['-d'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['-d', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['-d', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['-d', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['-d', '--', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['-d', '--', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: '-' })
    expect(parse(['-d', '--', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: '--' })
    expect(parse(['--decode'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--decode', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['--decode', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--decode', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: undefined })
    expect(parse(['--decode', '--', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: 'fileName' })
    expect(parse(['--decode', '--', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: '-' })
    expect(parse(['--decode', '--', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: false, fileName: '--' })
  })
  it('ignores garbage', function () {
    expect(parse(['-d', '-i'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['-d', '-i', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['-d', '-i', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['-d', '-i', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['-d', '-i', '--', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['-d', '-i', '--', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '-' })
    expect(parse(['-d', '-i', '--', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '--' })
    expect(parse(['--decode', '-i'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['--decode', '-i', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['--decode', '-i', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['--decode', '-i', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['--decode', '-i', '--', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['--decode', '-i', '--', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '-' })
    expect(parse(['--decode', '-i', '--', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '--' })
    expect(parse(['-d', '--ignore-garbage'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['-d', '--ignore-garbage', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['-d', '--ignore-garbage', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['-d', '--ignore-garbage', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['-d', '--ignore-garbage', '--', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['-d', '--ignore-garbage', '--', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '-' })
    expect(parse(['-d', '--ignore-garbage', '--', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '--' })
    expect(parse(['--decode', '--ignore-garbage'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['--decode', '--ignore-garbage', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['--decode', '--ignore-garbage', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['--decode', '--ignore-garbage', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: undefined })
    expect(parse(['--decode', '--ignore-garbage', '--', 'fileName'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: 'fileName' })
    expect(parse(['--decode', '--ignore-garbage', '--', '-'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '-' })
    expect(parse(['--decode', '--ignore-garbage', '--', '--'])).toEqual({ action: Action.decode, wrap: 38, ignoreGarbage: true, fileName: '--' })
  })
  it('throws', function () {
    expect(() => parse(['--help', '-'])).toThrow()
    expect(() => parse(['--help', '--decode'])).toThrow()
    expect(() => parse(['--help', '--help'])).toThrow()
    expect(() => parse(['--help', '--ignore-garbage'])).toThrow()
    expect(() => parse(['--help', '--version'])).toThrow()
    expect(() => parse(['--help', '-d'])).toThrow()
    expect(() => parse(['--help', '-i'])).toThrow()
    expect(() => parse(['--help', 'fileName'])).toThrow()
    expect(() => parse(['--help', '-w'])).toThrow()
    expect(() => parse(['--help', '--wrap'])).toThrow()
    expect(() => parse(['--version', '-'])).toThrow()
    expect(() => parse(['--version', '--decode'])).toThrow()
    expect(() => parse(['--version', '--help'])).toThrow()
    expect(() => parse(['--version', '--ignore-garbage'])).toThrow()
    expect(() => parse(['--version', '--version'])).toThrow()
    expect(() => parse(['--version', '-d'])).toThrow()
    expect(() => parse(['--version', '-i'])).toThrow()
    expect(() => parse(['--version', 'fileName'])).toThrow()
    expect(() => parse(['--version', '-w'])).toThrow()
    expect(() => parse(['--version', '--wrap'])).toThrow()
    expect(() => parse(['-d', '--help'])).toThrow()
    expect(() => parse(['-d', '--version'])).toThrow()
    expect(() => parse(['-d', '-w'])).toThrow()
    expect(() => parse(['-d', '--wrap'])).toThrow()
    expect(() => parse(['-d', '-d'])).toThrow()
    expect(() => parse(['-d', '--decode'])).toThrow()
    expect(() => parse(['-d', '-i', '-i'])).toThrow()
    expect(() => parse(['-d', '-i', '--ignore-garbage'])).toThrow()
    expect(() => parse(['-d', '--ignore-garbage', '-i'])).toThrow()
    expect(() => parse(['-d', '--ignore-garbage', '--ignore-garbage'])).toThrow()
    expect(() => parse(['--decode', '--help'])).toThrow()
    expect(() => parse(['--decode', '--version'])).toThrow()
    expect(() => parse(['--decode', '-w'])).toThrow()
    expect(() => parse(['--decode', '--wrap'])).toThrow()
    expect(() => parse(['--decode', '-d'])).toThrow()
    expect(() => parse(['--decode', '--decode'])).toThrow()
    expect(() => parse(['--decode', '-i', '-i'])).toThrow()
    expect(() => parse(['--decode', '-i', '--ignore-garbage'])).toThrow()
    expect(() => parse(['--decode', '--ignore-garbage', '-i'])).toThrow()
    expect(() => parse(['--decode', '--ignore-garbage', '--ignore-garbage'])).toThrow()
    expect(() => parse(['-i'])).toThrow()
    expect(() => parse(['--ignore-garbage'])).toThrow()
    expect(() => parse(['fileName', '--help'])).toThrow()
    expect(() => parse(['fileName', '--version'])).toThrow()
    expect(() => parse(['fileName', '-d'])).toThrow()
    expect(() => parse(['fileName', '--decode'])).toThrow()
    expect(() => parse(['fileName', '-i'])).toThrow()
    expect(() => parse(['fileName', '--ignore-garbage'])).toThrow()
    expect(() => parse(['fileName', '--'])).toThrow()
    expect(() => parse(['fileName', 'fileName'])).toThrow()
    expect(() => parse(['fileName', '-w'])).toThrow()
    expect(() => parse(['fileName', '--wrap'])).toThrow()
    expect(() => parse(['-d', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['-d', '-i', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['-d', '--ignore-garbage', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['-w', '140', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['--decode', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['--decode', '-i', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['--decode', '--ignore-garbage', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['--wrap', '140', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['--', 'fileName', 'fileName'])).toThrow()
    expect(() => parse(['-w', 'fileName'])).toThrow()
    expect(() => parse(['-w', '-78'])).toThrow()
    expect(() => parse(['-w', '99999999999999999999999'])).toThrow()
    expect(() => parse(['--wrap', 'fileName'])).toThrow()
    expect(() => parse(['--wrap', '-78'])).toThrow()
    expect(() => parse(['--wrap', '99999999999999999999999'])).toThrow()
  })
})
